import{c as i,d as c,q as s,w as u,o as w,l as m,g as p,a as d,b as S,T as n,e as A,u as y,f as g}from"./firebase.C_cAEJpe.js";class r{constructor(e){this.collectionName=e}async list(e){try{let t=i(c,this.collectionName);return e?.where&&e.where.forEach(([a,l,h])=>{t=s(t,u(a,l,h))}),e?.orderBy&&(t=s(t,w(e.orderBy[0],e.orderBy[1]))),e?.limit&&(t=s(t,m(e.limit))),(await p(t)).docs.map(a=>({id:a.id,...a.data(),createdAt:a.data().createdAt?.toDate?.()?.toISOString()||a.data().createdAt,updatedAt:a.data().updatedAt?.toDate?.()?.toISOString()||a.data().updatedAt}))}catch(t){throw console.error(`Failed to list ${this.collectionName}:`,t),t}}async getById(e){try{const t=d(c,this.collectionName,e),o=await S(t);if(o.exists()){const a=o.data();return{id:o.id,...a,createdAt:a.createdAt?.toDate?.()?.toISOString()||a.createdAt,updatedAt:a.updatedAt?.toDate?.()?.toISOString()||a.updatedAt}}return null}catch(t){throw console.error(`Failed to get ${this.collectionName} by ID:`,t),t}}async create(e){try{const t=n.now(),o={...e,createdAt:t,updatedAt:t};return{id:(await A(i(c,this.collectionName),o)).id,...o,createdAt:o.createdAt.toDate().toISOString(),updatedAt:o.updatedAt.toDate().toISOString()}}catch(t){throw console.error(`Failed to create ${this.collectionName}:`,t),t}}async update(e,t){try{const o=d(c,this.collectionName,e),a={...t,updatedAt:n.now()};return await y(o,a),this.getById(e)}catch(o){throw console.error(`Failed to update ${this.collectionName}:`,o),o}}async delete(e){try{const t=d(c,this.collectionName,e);return await g(t),{success:!0,id:e}}catch(t){throw console.error(`Failed to delete ${this.collectionName}:`,t),t}}}const N=new r("users"),v=new r("organizations"),I=new r("schools"),B=new r("divisions"),F=new r("departments"),O=new r("applets");export{F as a,O as b,B as d,v as o,I as s,N as u};
