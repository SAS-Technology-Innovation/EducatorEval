---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Admin User Setup - EducatorEval">
  <div class="min-h-screen bg-sas-background">
    <div class="max-w-4xl mx-auto px-4 py-12">
      <div class="bg-white rounded-2xl shadow-xl p-8">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold text-sas-gray-900 mb-2">Admin User Setup</h1>
          <p class="text-sas-gray-600">Create or update user roles and permissions</p>
        </div>

        <div id="setup-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
              <input 
                id="email" 
                type="email" 
                placeholder="user@sas.edu.sg"
                value="bfawcett@sas.edu.sg"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Primary Role</label>
              <select 
                id="primaryRole" 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="educator">Educator</option>
                <option value="staff">Staff</option>
                <option value="observer">Observer</option>
                <option value="manager">Manager</option>
                <option value="administrator">Administrator</option>
                <option value="super_admin" selected>Super Admin</option>
              </select>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
              <input 
                id="firstName" 
                type="text" 
                placeholder="First Name"
                value="Brian"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
              <input 
                id="lastName" 
                type="text" 
                placeholder="Last Name"
                value="Fawcett"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Job Title</label>
              <select 
                id="jobTitle" 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="superintendent" selected>Superintendent</option>
                <option value="principal">Principal</option>
                <option value="assistant_principal">Assistant Principal</option>
                <option value="teacher">Teacher</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Employee ID</label>
              <input 
                id="employeeId" 
                type="text" 
                placeholder="EMP-001"
                value="EMP-BFAWCETT"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="space-y-4">
            <label class="block text-sm font-medium text-gray-700">Permissions</label>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
              <label class="flex items-center">
                <input type="checkbox" id="perm-all" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                <span class="ml-2 text-sm">Full System Access</span>
              </label>
              <label class="flex items-center">
                <input type="checkbox" id="perm-users" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                <span class="ml-2 text-sm">Manage Users</span>
              </label>
              <label class="flex items-center">
                <input type="checkbox" id="perm-schools" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                <span class="ml-2 text-sm">Manage Schools</span>
              </label>
              <label class="flex items-center">
                <input type="checkbox" id="perm-observations" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                <span class="ml-2 text-sm">All Observations</span>
              </label>
              <label class="flex items-center">
                <input type="checkbox" id="perm-reports" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                <span class="ml-2 text-sm">System Reports</span>
              </label>
              <label class="flex items-center">
                <input type="checkbox" id="perm-admin" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                <span class="ml-2 text-sm">Admin Panel</span>
              </label>
            </div>
          </div>

          <div class="flex justify-center space-x-4 pt-6">
            <button 
              id="createUser" 
              class="bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
            >
              Update User Profile
            </button>
            <button 
              id="checkUser" 
              class="bg-gray-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-gray-700 transition-colors"
            >
              Check Current Profile
            </button>
            <button 
              id="getInstructions" 
              class="bg-green-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors"
            >
              Setup Instructions
            </button>
          </div>
        </div>

        <div id="result" class="mt-8 p-4 rounded-lg hidden">
          <h3 class="font-semibold mb-2">Result:</h3>
          <pre id="resultText" class="text-sm bg-gray-100 p-3 rounded overflow-auto"></pre>
        </div>
      </div>
    </div>
  </div>

  <script>
    import { collection, doc, setDoc, getDoc, query, where, getDocs } from 'firebase/firestore';
    import { getUserByEmail } from 'firebase/auth';
    import { auth, db } from '../lib/firebase';

    async function createOrUpdateUser() {
      const email = document.getElementById('email').value;
      const primaryRole = document.getElementById('primaryRole').value;
      const firstName = document.getElementById('firstName').value;
      const lastName = document.getElementById('lastName').value;
      const jobTitle = document.getElementById('jobTitle').value;
      const employeeId = document.getElementById('employeeId').value;

      // Gather permissions
      const permissions = [];
      if (document.getElementById('perm-all').checked) permissions.push('*');
      if (document.getElementById('perm-users').checked) permissions.push('manage_users');
      if (document.getElementById('perm-schools').checked) permissions.push('manage_schools');
      if (document.getElementById('perm-observations').checked) permissions.push('view_all_observations');
      if (document.getElementById('perm-reports').checked) permissions.push('system_reports');
      if (document.getElementById('perm-admin').checked) permissions.push('admin_panel');

      try {
        // First, check if Firebase Auth user exists
        let firebaseAuthUID = null;
        
        // Try to find the user by email in Firebase Auth
        // Note: We need to be authenticated as admin to do this
        const currentUser = auth.currentUser;
        if (!currentUser) {
          showResult('error', 'You must be logged in as an admin to manage users');
          return;
        }

        // Check if a user profile already exists with this email
        const usersRef = collection(db, 'users');
        const emailQuery = query(usersRef, where('email', '==', email));
        const emailQuerySnapshot = await getDocs(emailQuery);
        
        if (!emailQuerySnapshot.empty) {
          // User already exists, get their data
          const existingUser = emailQuerySnapshot.docs[0];
          firebaseAuthUID = existingUser.id;
          showResult('info', `User already exists with Firebase UID: ${firebaseAuthUID}. Updating profile...`);
        } else {
          // For new users, we need them to be created in Firebase Auth first
          showResult('error', `No Firebase Auth user found for ${email}. Please ensure the user has been created in Firebase Authentication first, then have them log in once before setting up their profile.`);
          return;
        }

        const userData = {
          id: firebaseAuthUID,
          email,
          firstName,
          lastName,
          displayName: `${firstName} ${lastName}`,
          employeeId,
          schoolId: 'sas-main',
          divisionId: 'administration',
          departmentId: 'leadership',
          primaryRole,
          secondaryRoles: [],
          permissions,
          jobTitle,
          certifications: ['Educational Leadership'],
          experience: 'Senior Educational Leader',
          subjects: [],
          grades: [],
          specializations: ['Educational Administration', 'Strategic Planning'],
          planningPeriods: [],
          languages: ['English'],
          isActive: true,
          accountStatus: 'active',
          lastLogin: new Date(),
          createdAt: new Date(),
          updatedAt: new Date(),
          metadata: {
            createdBy: 'admin_setup',
            source: 'manual_setup'
          }
        };

        // Use the Firebase Auth UID as the document ID
        await setDoc(doc(db, 'users', firebaseAuthUID), userData);
        
        showResult('success', `✅ User profile created/updated successfully for ${email} with Firebase UID: ${firebaseAuthUID}`);
      } catch (error) {
        showResult('error', `Error: ${error.message}`);
      }
    }

    async function checkUser() {
      const email = document.getElementById('email').value;
      
      try {
        // Search for user by email
        const usersRef = collection(db, 'users');
        const emailQuery = query(usersRef, where('email', '==', email));
        const querySnapshot = await getDocs(emailQuery);
        
        if (!querySnapshot.empty) {
          const userDoc = querySnapshot.docs[0];
          const userData = userDoc.data();
          showResult('info', `Found user with Firebase UID: ${userDoc.id}\n\n${JSON.stringify(userData, null, 2)}`);
        } else {
          showResult('warning', `No profile found for ${email}`);
        }
      } catch (error) {
        showResult('error', `Error: ${error.message}`);
      }
    }

    async function getFirebaseAuthUsers() {
      try {
        showResult('info', 'Note: To create a user profile, the user must first:\n1. Be created in Firebase Authentication (via Firebase Console)\n2. Log in at least once to establish their Firebase UID\n3. Then use this tool to set their role and permissions');
      } catch (error) {
        showResult('error', `Error: ${error.message}`);
      }
    }

    function showResult(type, message) {
      const resultDiv = document.getElementById('result');
      const resultText = document.getElementById('resultText');
      
      resultDiv.className = `mt-8 p-4 rounded-lg ${
        type === 'success' ? 'bg-green-100 border border-green-200' :
        type === 'error' ? 'bg-red-100 border border-red-200' :
        type === 'warning' ? 'bg-yellow-100 border border-yellow-200' :
        'bg-blue-100 border border-blue-200'
      }`;
      
      resultText.textContent = message;
      resultDiv.classList.remove('hidden');
    }

    // Event listeners
    document.getElementById('createUser').addEventListener('click', createOrUpdateUser);
    document.getElementById('checkUser').addEventListener('click', checkUser);
    document.getElementById('getInstructions').addEventListener('click', getFirebaseAuthUsers);
  </script>
</Layout>
